// Do not edit. Generated by gurkle v0.2.2 <https://github.com/technocreatives/gurkle>

pub mod counter {
    #![allow(dead_code)]
    use std::result::Result;
    pub const OPERATION_NAME: &str = "Counter";
    pub const QUERY: &str =
        "subscription Counter {\n  counter {\n    count\n    countStr\n  }\n}\n";
    #[allow(unused_imports)]
    use super::*;
    use serde::{Deserialize, Serialize};
    #[allow(dead_code)]
    type Boolean = bool;
    #[allow(dead_code)]
    type Float = f64;
    #[allow(dead_code)]
    type Int = i64;
    #[allow(dead_code)]
    type ID = String;
    #[derive(Serialize, Deserialize, Debug, Clone)]
    pub struct Variables;
    #[derive(Serialize, Deserialize, Debug, Clone)]
    pub struct Counter {
        pub counter: CounterCounter,
    }
    #[derive(Serialize, Deserialize, Debug, Clone)]
    pub struct CounterCounter {
        pub count: Int,
        #[serde(rename = "countStr")]
        pub count_str: Option<String>,
    }
    impl Variables {
        pub async fn subscribe(
            &self,
            client: &dyn gurkle::Subscriber<Counter>,
        ) -> Result<
            std::pin::Pin<
                Box<dyn futures_util::stream::Stream<Item = Result<Counter, gurkle::Error>> + Send>,
            >,
            gurkle::Error,
        > {
            let req_body = gurkle::RequestBody {
                variables: serde_json::to_value(&self)?,
                query: QUERY,
                operation_name: OPERATION_NAME,
            };
            client.subscribe(req_body).await
        }
    }
    impl Counter {
        pub fn map<T, F: FnOnce(Self) -> T>(self, f: F) -> T {
            (f)(self)
        }
    }
}
pub use counter::Counter;
pub use counter::Variables as CounterRequest;
